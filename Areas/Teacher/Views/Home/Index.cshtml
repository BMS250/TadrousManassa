@using TadrousManassa.Areas.Teacher.Models
@using TadrousManassa.Models
@using TadrousManassa.Utilities

<h1>Admin Page</h1>

<div class="row">
    <div class="col-md-3">
        <!-- Vertical Nav Tabs -->
        <ul class="nav flex-column nav-pills" id="adminTab" role="tablist" aria-orientation="vertical">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="settings-tab" data-tab="settings" type="button" role="tab" aria-controls="settings" aria-selected="true">
                    Settings
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="video-tab" data-tab="video" type="button" role="tab" aria-controls="video" aria-selected="false">
                    Video Upload
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="quiz-tab" data-tab="quiz" type="button" role="tab" aria-controls="quiz" aria-selected="false">
                    Create Quiz
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="lectures-tab" data-tab="lectures" type="button" role="tab" aria-controls="lectures" aria-selected="false">
                    Lectures Analysis
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="codes-tab" data-tab="codes" type="button" role="tab" aria-controls="codes" aria-selected="false">
                    Lecture Codes
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="reset-tab" data-tab="reset" type="button" role="tab" aria-controls="reset" aria-selected="false">
                    Reset Device ID
                </button>
            </li>
        </ul>
    </div>

    <div class="col-md-9">
        <div class="tab-content" id="adminTabContent">
            <div class="tab-pane fade show active p-3" id="settings-pane" role="tabpanel" aria-labelledby="settings-tab">
                <img id="settings-spinner" src="/images/SpinnerLoading.gif" style="display:none; margin:auto;" alt="Loading..." />
            </div>
            <div class="tab-pane fade p-3" id="video-pane" role="tabpanel" aria-labelledby="video-tab">
                <img id="video-spinner" src="/images/SpinnerLoading.gif" style="display:none; margin:auto;" alt="Loading..." />
            </div>
            <div class="tab-pane fade p-3" id="quiz-pane" role="tabpanel" aria-labelledby="quiz-tab">
                <img id="quiz-spinner" src="/images/SpinnerLoading.gif" style="display:none; margin:auto;" alt="Loading..." />
            </div>
            <div class="tab-pane fade p-3" id="lectures-pane" role="tabpanel" aria-labelledby="lectures-tab">
                <img id="lectures-spinner" src="/images/SpinnerLoading.gif" style="display:none; margin:auto;" alt="Loading..." />
            </div>
            <div class="tab-pane fade p-3" id="codes-pane" role="tabpanel" aria-labelledby="codes-tab">
                <img id="codes-spinner" src="/images/SpinnerLoading.gif" style="display:none; margin:auto;" alt="Loading..." />
            </div>
            <div class="tab-pane fade p-3" id="reset-pane" role="tabpanel" aria-labelledby="reset-tab">
                <img id="reset-spinner" src="/images/SpinnerLoading.gif" style="display:none; margin:auto;" alt="Loading..." />
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Load settings tab by default
            loadTab('settings');
            
            const tabButtons = document.querySelectorAll('#adminTab .nav-link');
            tabButtons.forEach(btn => {
                btn.addEventListener('click', function () {
                    tabButtons.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    const tab = this.getAttribute('data-tab');
                    const paneId = `#${tab}-pane`;
                    document.querySelectorAll('.tab-pane').forEach(p => p.classList.remove('show', 'active'));
                    const pane = document.querySelector(paneId);
                    pane.classList.add('show', 'active');
                    loadTab(tab);
                });
            });
            
            function loadTab(tab) {
                const pane = document.querySelector(`#${tab}-pane`);
                if (!pane.hasAttribute('data-loaded')) {
                    const spinner = document.getElementById(`${tab}-spinner`);
                    if(spinner) spinner.style.display = 'block';
                    
                    // Map tabs to their respective controllers
                    const controllerMap = {
                        'settings': 'Setting',
                        'video': 'Video', 
                        'quiz': 'Quiz',
                        'lectures': 'Lecture',
                        'codes': 'Code',
                        'reset': 'Device'
                    };
                    
                    const controller = controllerMap[tab] || 'Home';
                    fetch(`/Teacher/${controller}/Load${tab.charAt(0).toUpperCase() + tab.slice(1)}Tab`)
                        .then(res => res.text())
                        .then(html => {
                            if(spinner) spinner.style.display = 'none';
                            pane.innerHTML = spinner.outerHTML + html;

                            // Execute any scripts embedded in the loaded HTML
                            const scripts = Array.from(pane.querySelectorAll('script'));
                            scripts.forEach(oldScript => {
                                const newScript = document.createElement('script');
                                // Copy attributes (e.g., src, type)
                                Array.from(oldScript.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value));
                                if (!oldScript.src) {
                                    newScript.textContent = oldScript.textContent;
                                }
                                // Replace to trigger execution
                                oldScript.parentNode.replaceChild(newScript, oldScript);
                            });

                            pane.setAttribute('data-loaded', 'true');
                        });
                }
            }
        });
    </script>


    <!-- Add this toast for copy feedback -->
    <div class="toast position-fixed bottom-0 end-0 m-3" id="copyToast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="2000">
        <div class="toast-body bg-success text-white">
            Code copied to clipboard!
        </div>
    </div>
}