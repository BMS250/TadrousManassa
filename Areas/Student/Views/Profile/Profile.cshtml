@model TadrousManassa.Models.Profile
@{
    ViewData["Title"] = "Profile";
}
@Html.AntiForgeryToken()

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h2 class="text-center mb-4">Profile</h2>
        </div>
    </div>
    
    <div class="row">
        <!-- الصورة الشخصية -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-body text-center">
                    <div id="imageContainer" class="mb-3">
                        @if (Model.Image != null && Model.Image.Length > 0)
                        {
                            <img id="profileImage" src="data:image/jpeg;base64,@Convert.ToBase64String(Model.Image)" 
                                 class="img-fluid rounded-circle" style="width: 200px; height: 200px; object-fit: cover;" 
                                 alt="Profile Image">
                        }
                        else
                        {
                            <div id="noImagePlaceholder" class="d-flex align-items-center justify-content-center bg-light rounded-circle mx-auto" 
                                 style="width: 200px; height: 200px; cursor: pointer;" onclick="document.getElementById('imageInput').click()">
                                <i class="fas fa-camera fa-3x text-muted"></i>
                            </div>
                        }
                    </div>
                    
                    <input type="file" id="imageInput" accept="image/*" style="display: none;" onchange="uploadImage(this)">
                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="document.getElementById('imageInput').click()">
                        <i class="fas fa-upload"></i> Upload Image
                    </button>
                </div>
            </div>
        </div>
        
        <!-- بيانات الملف الشخصي -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Profile Information</h5>
                </div>
                <div class="card-body">
                    <form id="profileForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="name" class="form-label">Name</label>
                                <input type="text" class="form-control" id="name" name="name" value="@Model.Name" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="email" class="form-label">Email</label>
                                <input type="email" class="form-control" id="email" name="email" value="@Model.Email" required>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="phoneNumber" class="form-label">Phone Number</label>
                                <input type="tel" class="form-control" id="phoneNumber" name="phoneNumber" value="@Model.PhoneNumber">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="totalScore" class="form-label">Total Score</label>
                                <input type="number" class="form-control" id="totalScore" name="totalScore" value="@Model.TotalScore" readonly>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="rank" class="form-label">Rank</label>
                                <input type="number" class="form-control" id="rank" name="rank" value="@Model.Rank" readonly>
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i> Save Changes
                            </button>
                            <button type="button" class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#changePasswordModal">
                                <i class="fas fa-key"></i> Change Password
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal لتغيير كلمة المرور -->
<div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="changePasswordModalLabel">Change Password</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="changePasswordForm">
                    <div class="mb-3">
                        <label for="currentPassword" class="form-label">Current Password</label>
                        <input type="password" class="form-control" id="currentPassword" name="currentPassword" required>
                    </div>
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password</label>
                        <input type="password" class="form-control" id="newPassword" name="newPassword" required>
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm New Password</label>
                        <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="changePassword()">Change Password</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // رفع الصورة
        function uploadImage(input) {
            if (input.files && input.files[0]) {
                const file = input.files[0];
                
                // Check file type
                if (!file.type.startsWith('image/')) {
                    alert('Please select a valid image file');
                    return;
                }
                
                // Check file size (5MB max)
                if (file.size > 5 * 1024 * 1024) {
                    alert('Image size must be less than 5MB');
                    return;
                }
                
                const formData = new FormData();
                formData.append('image', file);
                
                // Add anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                formData.append('__RequestVerificationToken', token);

                fetch('/Student/Profile/UploadProfileImage', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Update image in page
                        const imageContainer = document.getElementById('imageContainer');
                        const noImagePlaceholder = document.getElementById('noImagePlaceholder');
                        
                        if (noImagePlaceholder) {
                            noImagePlaceholder.remove();
                        }
                        
                        let profileImage = document.getElementById('profileImage');
                        if (!profileImage) {
                            profileImage = document.createElement('img');
                            profileImage.id = 'profileImage';
                            profileImage.className = 'img-fluid rounded-circle';
                            profileImage.style.width = '200px';
                            profileImage.style.height = '200px';
                            profileImage.style.objectFit = 'cover';
                            profileImage.alt = 'Profile Image';
                            imageContainer.appendChild(profileImage);
                        }
                        
                        profileImage.src = 'data:image/jpeg;base64,' + data.imageData;
                        showAlert('Image uploaded successfully', 'success');
                    } else {
                        showAlert(data.message || 'Error uploading image2', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Error uploading image3', 'error');
                });
            }
        }
        
        // Update profile data
        document.getElementById('profileForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            
            fetch('/Student/Profile/UpdateProfile', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('Profile updated successfully', 'success');
                } else {
                    showAlert(data.message || 'Error updating profile', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Error updating profile', 'error');
            });
        });
        
        // Change password
        function changePassword() {
            const form = document.getElementById('changePasswordForm');
            const formData = new FormData(form);
            
            // Check if new passwords match
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (newPassword !== confirmPassword) {
                showAlert('New password and confirmation do not match', 'error');
                return;
            }
            
            fetch('/Student/Profile/ChangePassword', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('Password changed successfully', 'success');
                    // Close modal and reset form
                    const modal = bootstrap.Modal.getInstance(document.getElementById('changePasswordModal'));
                    modal.hide();
                    form.reset();
                } else {
                    showAlert(data.message || 'Error changing password', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Error changing password', 'error');
            });
        }
        
        // Show alerts
        function showAlert(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const alertHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            
            // Add alert at the top of the page
            const container = document.querySelector('.container');
            container.insertAdjacentHTML('afterbegin', alertHtml);
            
            // Remove alert automatically after 5 seconds
            setTimeout(() => {
                const alert = container.querySelector('.alert');
                if (alert) {
                    alert.remove();
                }
            }, 5000);
        }
    </script>
}
